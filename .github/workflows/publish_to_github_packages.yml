name: Deploy Release to GitHub Packages
on:
  push:
    tags:
      - 'v*'
  workflow_dispatch: 
    inputs:
      version:
        type: string
        description: Version
        required: true

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set version
        id: set_version
        run: |
          if [ "${{ github.event_name }}" == "push" ]; then
            echo "::set-output name=version::${GITHUB_REF#refs/tags/}"
          elif [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "::set-output name=version::${{ github.event.inputs.version }}"
          fi

      - name: Build frontend
        run: |
          npm ci
          npm run tailwind-minify
          npm run webpack-build

          if [ -f frontend/static/src/output.css ]; then
            echo "output.css is created"
          else
            echo "output.css is not created"
            exit 1
          fi
          if [ -d frontend/static/js/c/ ]; then
            echo "webpack has been built"
          else
            echo "frontend/static/js/c/ was not created from webpack build"
            exit 1
          fi
          if [ -f webpack-stats.json ]; then
            echo "webpack-stats was built successfully"
          else
            echo "webpack-stats was not built"
            exit 1
          fi

      - name: Set up Docker Buildx
        run: |
          docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
          docker buildx create --name multiarch-builder --use
          docker buildx inspect --bootstrap

      - name: Log in to GitHub Docker Registry
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Build, tag, and push multi-arch image to GitHub Packages
        id: build-image
        env:
          IMAGE_NAME: ghcr.io/treyww/myfinances
          IMAGE_TAG: ${{ steps.set_version.outputs.version }}
        run: |
          cp infrastructure/backend/Dockerfile ./Dockerfile
          echo "VERSION IS: ${{ steps.set_version.outputs.version }} or $IMAGE_TAG"
          
          # Use buildx to build for multiple platforms (arm64 and amd64)
          docker buildx build --platform linux/amd64,linux/arm64 \
            -t $IMAGE_NAME:$IMAGE_TAG . \
            --push

          # Optionally push the 'latest' tag for both platforms
          docker buildx build --platform linux/amd64,linux/arm64 \
            -t $IMAGE_NAME:latest . \
            --push

          echo "::set-output name=image::$IMAGE_NAME:$IMAGE_TAG"
          echo "::set-output name=latest_image::$IMAGE_NAME:latest"
